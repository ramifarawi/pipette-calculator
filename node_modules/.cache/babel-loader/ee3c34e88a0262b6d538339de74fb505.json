{"ast":null,"code":"class AssignPipette {\n  constructor(transfer_vol, eight_tips, change_tips) {\n    this.transfer_vol = transfer_vol;\n    this.eight_tips = eight_tips;\n    this.change_tips = change_tips;\n  }\n\n} // console.log(liquid_vol)\n// var liquid1 = new AssignLabware(100, 40, 'Multi');\n\n\nfunction FindPipette(liquid) {\n  let vol = liquid.vol_per_multiplier * liquid.multiplier / 1000;\n\n  if (liquid.transfer_vol <= 20) {\n    if (eight_tips == 'Yes') {\n      return 'P20 Single Channel Pipette';\n    } else {\n      return 'P20 Multi-Channel Pipette';\n    }\n  }\n\n  if (liquid.single_or_multi == 'Multi') {\n    // MULTI-CHANNEL ACCESS\n    if (vol > 4 && vol < 185) {\n      let num_wells = Math.ceil(vol / well_ceiling_res);\n\n      if (vol > 50) {\n        return [' Nest 12 Well Reservoir ' + left_paren + num_wells + ' wells' + right_paren + ', or Nest 1 Well Reservior ', vol_string];\n      } else {\n        return [' Nest 12 Well Reservoir ' + left_paren + num_wells + ' wells' + right_paren, vol_string];\n      }\n    } else if (vol >= 50) {\n      let labware_count = Math.ceil(vol / well_ceiling_195mL);\n      return [labware_count + ' Nest 1 Well Reservoirs', vol_string];\n    } else if (vol <= 4) {\n      return ['Well plate', vol_string];\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single') {\n    // SINGLE-CHANNEL ACCESS\n    let num_well_res_12 = Math.ceil(vol / well_ceiling_res);\n    let num_tubes_falcon = Math.ceil(vol / well_ceiling_falcon);\n    let num_tubes_15mL = Math.ceil(vol / well_ceiling_15mL);\n    let nest_12_string = ' Nest 12 Well Reservoir' + left_paren + num_well_res_12 + ' wells' + right_paren;\n    let nest_1_string = ', Nest 1 Well Reservior';\n    let falcon_50_string = ', Falcon 50mL tubes ' + left_paren + num_tubes_falcon + ' tubes ' + right_paren;\n    let tube_15mL_string = ', or 15mL tubes ' + left_paren + num_tubes_15mL + ' tubes' + right_paren;\n\n    if (vol > 10 && vol < 185) {\n      if (vol > 50) {\n        return [nest_12_string + nest_1_string + falcon_50_string + tube_15mL_string, vol_string];\n      } else {\n        return [nest_12_string + falcon_50_string + tube_15mL_string, vol_string];\n      }\n    } else if (vol <= 10) {\n      let num_tubes_1500ul = Math.ceil(vol / well_ceiling_1500ul);\n      let num_tubes_2000ul = Math.ceil(vol / well_ceiling_2000ul);\n      let tube_1500ul_string = left_paren + num_tubes_1500ul + right_paren + ' 1.5mL tubes';\n      let tube_2000ul_string = ', or ' + left_paren + num_tubes_2000ul + right_paren + ' 2mL tubes';\n      return [tube_1500ul_string + tube_2000ul_string, vol_string];\n    } else {\n      let labware_count = Math.ceil(vol / well_ceiling_195mL);\n      return [left_paren + labware_count + right_paren + ' Nest 1 Well Reservior(s)', vol_string];\n    }\n  }\n} // console.log(find_labware(liquid1.vol));\n// module.exports = {find_labware}\n\n\n_c = FindPipette;\nexport default FindPipette;\n\nvar _c;\n\n$RefreshReg$(_c, \"FindPipette\");","map":{"version":3,"sources":["/Users/work/Desktop/pipette-calculator/src/calculator.js"],"names":["AssignPipette","constructor","transfer_vol","eight_tips","change_tips","FindPipette","liquid","vol","vol_per_multiplier","multiplier","single_or_multi","num_wells","Math","ceil","well_ceiling_res","left_paren","right_paren","vol_string","labware_count","well_ceiling_195mL","num_well_res_12","num_tubes_falcon","well_ceiling_falcon","num_tubes_15mL","well_ceiling_15mL","nest_12_string","nest_1_string","falcon_50_string","tube_15mL_string","num_tubes_1500ul","well_ceiling_1500ul","num_tubes_2000ul","well_ceiling_2000ul","tube_1500ul_string","tube_2000ul_string"],"mappings":"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","sourcesContent":["class AssignPipette {\n  constructor(transfer_vol, eight_tips, change_tips){\n    this.transfer_vol = transfer_vol;\n    this.eight_tips = eight_tips;\n    this.change_tips = change_tips;\n  }\n}\n// console.log(liquid_vol)\n// var liquid1 = new AssignLabware(100, 40, 'Multi');\n\nfunction FindPipette(liquid){\n  let vol = liquid.vol_per_multiplier*liquid.multiplier/1000;\n\n  if (liquid.transfer_vol <= 20){\n    if (eight_tips == 'Yes'){\n      return('P20 Single Channel Pipette')\n    }\n    else {\n      return('P20 Multi-Channel Pipette') \n    }\n  }\n  if (liquid.single_or_multi == 'Multi') {   // MULTI-CHANNEL ACCESS\n    if (vol > 4 && vol < 185){\n      let num_wells = Math.ceil(vol/well_ceiling_res);\n      if (vol > 50){\n        return([' Nest 12 Well Reservoir ' +  left_paren + num_wells + ' wells' + right_paren +\n               ', or Nest 1 Well Reservior ', vol_string])\n      }\n      else {\n        return([' Nest 12 Well Reservoir ' + left_paren + num_wells + ' wells' + right_paren , vol_string]);\n      }\n\n    }\n    else if (vol >= 50){\n      let labware_count = Math.ceil(vol/well_ceiling_195mL);\n      return([labware_count + ' Nest 1 Well Reservoirs', vol_string] );\n    }\n    else if (vol <= 4) {\n      return(['Well plate' , vol_string]);\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single'){               // SINGLE-CHANNEL ACCESS\n    let num_well_res_12 = Math.ceil(vol/well_ceiling_res);\n    let num_tubes_falcon = Math.ceil(vol/well_ceiling_falcon);\n    let num_tubes_15mL = Math.ceil(vol/well_ceiling_15mL);\n\n    let nest_12_string = ' Nest 12 Well Reservoir' + left_paren + num_well_res_12 + ' wells' + right_paren\n    let nest_1_string = ', Nest 1 Well Reservior'\n    let falcon_50_string = ', Falcon 50mL tubes ' + left_paren + num_tubes_falcon + ' tubes ' + right_paren\n    let tube_15mL_string = ', or 15mL tubes ' + left_paren + num_tubes_15mL + ' tubes' + right_paren\n\n    if (vol > 10 && vol < 185){\n      if (vol > 50){\n        return([nest_12_string + nest_1_string + falcon_50_string + tube_15mL_string , vol_string])\n      }\n      else {\n        return([nest_12_string + falcon_50_string + tube_15mL_string, vol_string])\n      }\n\n    }\n    else if (vol <= 10){\n\n      let num_tubes_1500ul = Math.ceil(vol/well_ceiling_1500ul);\n      let num_tubes_2000ul = Math.ceil(vol/well_ceiling_2000ul);\n\n      let tube_1500ul_string = left_paren + num_tubes_1500ul + right_paren + ' 1.5mL tubes'\n      let tube_2000ul_string = ', or ' + left_paren + num_tubes_2000ul + right_paren + ' 2mL tubes'\n\n      return([tube_1500ul_string + tube_2000ul_string , vol_string]);\n    }\n    else{\n      let labware_count = Math.ceil(vol/well_ceiling_195mL);\n      return([left_paren + labware_count + right_paren + ' Nest 1 Well Reservior(s)', vol_string])\n    }\n  }\n}\n// console.log(find_labware(liquid1.vol));\n\n// module.exports = {find_labware}\nexport default FindPipette;\n"]},"metadata":{},"sourceType":"module"}