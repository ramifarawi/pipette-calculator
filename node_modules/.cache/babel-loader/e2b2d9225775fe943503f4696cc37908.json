{"ast":null,"code":"class AssignLabware {\n  constructor(vol_per_multiplier, multiplier, single_or_multi) {\n    this.vol_per_multiplier = vol_per_multiplier;\n    this.multiplier = multiplier;\n    this.single_or_multi = single_or_multi; // this.vol = Number(vol_per_multiplier)*Number(multiplier)\n  }\n\n} // console.log(liquid_vol)\n// var liquid1 = new AssignLabware(100, 40, 'Multi');\n\n\nfunction find_labware(liquid) {\n  let vol = liquid.vol_per_multiplier * liquid.multiplier / 1000; // return(vol)\n\n  let single_or_multi = liquid.single_or_multi;\n  let vol_notation = vol > 0.5 ? vol : vol * 1000;\n  let vol_string = vol_notation + (vol > 0.5 ? 'mL~' : 'ul~');\n  let left_paren = '(';\n  let right_paren = ')';\n  let well_ceiling_res = 14;\n  let well_ceiling_195mL = 185;\n  let well_ceiling_falcon = 45;\n  let well_ceiling_15mL = 13;\n  let well_ceiling_1500ul = 1.2;\n  let well_ceiling_2000ul = 1.7;\n\n  if (liquid.single_or_multi == 'Multi') {\n    // MULTI-CHANNEL ACCESS\n    if (vol > 4 && vol < 185) {\n      let num_wells = Math.ceil(vol / well_ceiling_res);\n\n      if (vol > 50) {\n        return [' Nest 12 Well Reservoir ' + left_paren + num_wells + ' wells' + right_paren + ', or Nest 1 Well Reservior ' + vol_string, vol_string];\n      } else {\n        return [' Nest 12 Well Reservoir ' + left_paren + num_wells + ' wells' + right_paren + vol_string, vol_string];\n      }\n    } else if (vol >= 50) {\n      let labware_count = Math.ceil(vol / well_ceiling_195mL);\n      return labware_count + ' Nest 1 Well Reservoirs' + vol_string;\n    } else if (vol <= 4) {\n      return ['Well plate' + vol_string, vol_string];\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single') {\n    // SINGLE-CHANNEL ACCESS\n    if (vol > 10 && vol < 185) {\n      let num_well_res_12 = Math.ceil(vol / well_ceiling_res);\n      let num_tubes_falcon = Math.ceil(vol / well_ceiling_falcon);\n      let num_tubes_15mL = Math.ceil(vol / well_ceiling_15mL);\n      let nest_12_string = ' Nest 12 Well Reservoir' + left_paren + num_well_res_12 + ' wells' + right_paren;\n      let nest_1_string = ', Nest 1 Well Reservior';\n      let falcon_50_string = ', Falcon 50mL tubes ' + left_paren + num_tubes_falcon + ' tubes ' + right_paren;\n      let tube_15mL_string = ', or 15mL tubes ' + left_paren + num_tubes_15mL + ' tubes' + right_paren;\n\n      if (vol > 50) {\n        return [nest_12_string + nest_1_string + falcon_50_string + tube_15mL_string + vol_string, vol_string];\n      } else {\n        return [nest_12_string + falcon_50_string + tube_15mL_string + vol_string, vol_string];\n      }\n    } else if (vol <= 10) {\n      let num_tubes_1500ul = Math.ceil(vol / well_ceiling_1500ul);\n      let num_tubes_2000ul = Math.ceil(vol / well_ceiling_2000ul);\n      let tube_1500ul_string = left_paren + num_tubes_1500ul + right_paren + ' 1.5mL tubes';\n      let tube_2000ul_string = ', or ' + left_paren + num_tubes_2000ul + right_paren + ' 2mL tubes';\n      return [tube_1500ul_string + tube_2000ul_string + vol_string, vol_string];\n    }\n  }\n} // console.log(find_labware(liquid1.vol));\n\n\nmodule.exports = {\n  find_labware\n};","map":{"version":3,"sources":["/Users/work/Desktop/consumable-calculator/src/calculator.js"],"names":["AssignLabware","constructor","vol_per_multiplier","multiplier","single_or_multi","find_labware","liquid","vol","vol_notation","vol_string","left_paren","right_paren","well_ceiling_res","well_ceiling_195mL","well_ceiling_falcon","well_ceiling_15mL","well_ceiling_1500ul","well_ceiling_2000ul","num_wells","Math","ceil","labware_count","num_well_res_12","num_tubes_falcon","num_tubes_15mL","nest_12_string","nest_1_string","falcon_50_string","tube_15mL_string","num_tubes_1500ul","num_tubes_2000ul","tube_1500ul_string","tube_2000ul_string","module","exports"],"mappings":"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","sourcesContent":["class AssignLabware {\n  constructor(vol_per_multiplier, multiplier, single_or_multi){\n    this.vol_per_multiplier = vol_per_multiplier;\n    this.multiplier = multiplier;\n    this.single_or_multi = single_or_multi;\n    // this.vol = Number(vol_per_multiplier)*Number(multiplier)\n  }\n}\n// console.log(liquid_vol)\n// var liquid1 = new AssignLabware(100, 40, 'Multi');\n\nfunction find_labware(liquid){\n  let vol = liquid.vol_per_multiplier*liquid.multiplier/1000;\n  // return(vol)\n  let single_or_multi = liquid.single_or_multi;\n  let vol_notation = (vol > 0.5) ? vol : vol*1000\n  let vol_string = vol_notation + ((vol > 0.5) ? 'mL~' : 'ul~')\n  let left_paren = '('\n  let right_paren = ')'\n\n  let well_ceiling_res = 14\n  let well_ceiling_195mL = 185\n  let well_ceiling_falcon = 45\n  let well_ceiling_15mL = 13\n  let well_ceiling_1500ul = 1.2\n  let well_ceiling_2000ul = 1.7\n\n  if (liquid.single_or_multi == 'Multi') {   // MULTI-CHANNEL ACCESS\n    if (vol > 4 && vol < 185){\n      let num_wells = Math.ceil(vol/well_ceiling_res);\n      if (vol > 50){\n        return([' Nest 12 Well Reservoir ' +  left_paren + num_wells + ' wells' + right_paren +\n               ', or Nest 1 Well Reservior ' + vol_string, vol_string])\n      }\n      else {\n        return([' Nest 12 Well Reservoir ' + left_paren + num_wells + ' wells' + right_paren + vol_string, vol_string]);\n      }\n\n    }\n    else if (vol >= 50){\n      let labware_count = Math.ceil(vol/well_ceiling_195mL);\n      return(labware_count + ' Nest 1 Well Reservoirs' + vol_string);\n    }\n    else if (vol <= 4) {\n      return(['Well plate' + vol_string, vol_string]);\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single'){               // SINGLE-CHANNEL ACCESS\n    if (vol > 10 && vol < 185){\n      let num_well_res_12 = Math.ceil(vol/well_ceiling_res);\n      let num_tubes_falcon = Math.ceil(vol/well_ceiling_falcon);\n      let num_tubes_15mL = Math.ceil(vol/well_ceiling_15mL);\n\n      let nest_12_string = ' Nest 12 Well Reservoir' + left_paren + num_well_res_12 + ' wells' + right_paren\n      let nest_1_string = ', Nest 1 Well Reservior'\n      let falcon_50_string = ', Falcon 50mL tubes ' + left_paren + num_tubes_falcon + ' tubes ' + right_paren\n      let tube_15mL_string = ', or 15mL tubes ' + left_paren + num_tubes_15mL + ' tubes' + right_paren\n\n      if (vol > 50){\n        return([nest_12_string + nest_1_string + falcon_50_string + tube_15mL_string + vol_string, vol_string])\n      }\n      else {\n        return([nest_12_string + falcon_50_string + tube_15mL_string + vol_string, vol_string])\n      }\n\n    }\n    else if (vol <= 10){\n\n      let num_tubes_1500ul = Math.ceil(vol/well_ceiling_1500ul);\n      let num_tubes_2000ul = Math.ceil(vol/well_ceiling_2000ul);\n\n      let tube_1500ul_string = left_paren + num_tubes_1500ul + right_paren + ' 1.5mL tubes'\n      let tube_2000ul_string = ', or ' + left_paren + num_tubes_2000ul + right_paren + ' 2mL tubes'\n\n      return([tube_1500ul_string + tube_2000ul_string + vol_string, vol_string]);\n    }\n  }\n}\n// console.log(find_labware(liquid1.vol));\n\nmodule.exports = {find_labware}\n"]},"metadata":{},"sourceType":"module"}