{"ast":null,"code":"class AssignLabware {\n  constructor(vol_per_multiplier, multiplier, single_or_multi) {\n    this.vol_per_multiplier = vol_per_multiplier;\n    this.multiplier = multiplier;\n    this.single_or_multi = single_or_multi;\n  }\n\n} // console.log(liquid_vol)\n\n\nvar liquid1 = new AssignLabware(2500, 9, 'Single');\n\nfunction find_labware(liquid) {\n  let vol = liquid.vol_per_multiplier * liquid.multiplier;\n  let single_or_multi = liquid.single_or_multi;\n\n  if (liquid.single_or_multi == 'Multi' || 'multi') {\n    // MULTI-CHANNEL ACCESS\n    if (vol > 4000 && vol < 90000 && liquid.single_or_multi == 'Multi' || 'multi') {\n      let num_wells = Math.ceil(vol / 14000);\n      return 'Total Volume: ' + vol / 1000 + 'mL  /// ' + ' Recommended labware: ' + ' Nest 12 Well Reservoir /// ' + num_wells + ' wells';\n    } else if (vol > 50000) {\n      let labware_count = Math.ceil(vol / 185000);\n      return 'Total Volume: ' + vol / 1000 + 'mL  /// ' + ' Recommended labware: ' + labware_count + ' Nest 1 Well Reservoir(s)';\n    } else if (vol < 4000) {\n      return 'Total Volume: ' + vol / 1000 + 'mL  /// ' + ' Recommended labware: ' + 'Well plate';\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single' || 'single') {\n    // SINGLE-CHANNEL ACCESS\n    if (vol > 8000 && vol < 90000) {\n      let num_well_res = Math.ceil(vol / 14000);\n      let num_tubes_falcon = Math.ceil(vol / 46000);\n      let num_tubes_15mL = Math.ceil(vol / 12000);\n      return 'Nest 12 Well Reservoir with ' + num_well_res + ' well(s), ' + 'Falcon 50mL tubes with ' + num_tubes_falcon + ' tube(s), ' + 'or 15mL tubes with ' + num_tubes_15mL + ' tube(s)';\n    } else if (vol < 8000) {\n      let num_tubes_1500ul = Math.ceil(vol / 1400);\n      let num_tubes_2mL = Math.ceil(vol / 1800);\n      return num_tubes_1500ul + ' 1.5mL tubes' + ' or ' + num_tubes_2mL + ' 2mL tubes';\n    }\n  }\n}\n\nconsole.log(find_labware(liquid1));\nmodule.exports = {\n  find_labware\n};","map":{"version":3,"sources":["/Users/work/Desktop/consumable-calculator/src/calculator.js"],"names":["AssignLabware","constructor","vol_per_multiplier","multiplier","single_or_multi","liquid1","find_labware","liquid","vol","num_wells","Math","ceil","labware_count","num_well_res","num_tubes_falcon","num_tubes_15mL","num_tubes_1500ul","num_tubes_2mL","console","log","module","exports"],"mappings":"AAAA,MAAMA,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,kBAAD,EAAqBC,UAArB,EAAiCC,eAAjC,EAAiD;AAC1D,SAAKF,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACD;;AALiB,C,CAOpB;;;AACA,IAAIC,OAAO,GAAG,IAAIL,aAAJ,CAAkB,IAAlB,EAAwB,CAAxB,EAA2B,QAA3B,CAAd;;AAGA,SAASM,YAAT,CAAsBC,MAAtB,EAA6B;AAC3B,MAAIC,GAAG,GAAGD,MAAM,CAACL,kBAAP,GAA0BK,MAAM,CAACJ,UAA3C;AACA,MAAIC,eAAe,GAAGG,MAAM,CAACH,eAA7B;;AAEA,MAAIG,MAAM,CAACH,eAAP,IAA0B,OAA1B,IAAqC,OAAzC,EAAkD;AAAI;AACpD,QAAII,GAAG,GAAG,IAAN,IAAcA,GAAG,GAAG,KAApB,IAA6BD,MAAM,CAACH,eAAP,IAA0B,OAAvD,IAAkE,OAAtE,EAA8E;AAC5E,UAAIK,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUH,GAAG,GAAC,KAAd,CAAhB;AACA,aAAO,mBAAmBA,GAAG,GAAC,IAAvB,GAA8B,UAA9B,GACP,wBADO,GACoB,8BADpB,GACqDC,SADrD,GACiE,QADxE;AAED,KAJD,MAKK,IAAID,GAAG,GAAG,KAAV,EAAgB;AACnB,UAAII,aAAa,GAAGF,IAAI,CAACC,IAAL,CAAUH,GAAG,GAAC,MAAd,CAApB;AACA,aAAO,mBAAmBA,GAAG,GAAC,IAAvB,GAA8B,UAA9B,GACP,wBADO,GACoBI,aADpB,GACoC,2BAD3C;AAED,KAJI,MAKA,IAAIJ,GAAG,GAAG,IAAV,EAAgB;AACnB,aAAO,mBAAmBA,GAAG,GAAC,IAAvB,GAA8B,UAA9B,GACD,wBADC,GAC0B,YADjC;AAED;AACF;;AAED,MAAID,MAAM,CAACH,eAAP,IAA0B,QAA1B,IAAsC,QAA1C,EAAmD;AAAgB;AACjE,QAAII,GAAG,GAAG,IAAN,IAAcA,GAAG,GAAG,KAAxB,EAA8B;AAC5B,UAAIK,YAAY,GAAGH,IAAI,CAACC,IAAL,CAAUH,GAAG,GAAC,KAAd,CAAnB;AACA,UAAIM,gBAAgB,GAAGJ,IAAI,CAACC,IAAL,CAAUH,GAAG,GAAC,KAAd,CAAvB;AACA,UAAIO,cAAc,GAAGL,IAAI,CAACC,IAAL,CAAUH,GAAG,GAAC,KAAd,CAArB;AACA,aAAO,iCAAiCK,YAAjC,GAAgD,YAAhD,GACA,yBADA,GAC4BC,gBAD5B,GAC+C,YAD/C,GAEA,qBAFA,GAEwBC,cAFxB,GAEyC,UAFhD;AAID,KARD,MASK,IAAIP,GAAG,GAAG,IAAV,EAAe;AAClB,UAAIQ,gBAAgB,GAAGN,IAAI,CAACC,IAAL,CAAUH,GAAG,GAAC,IAAd,CAAvB;AACA,UAAIS,aAAa,GAAGP,IAAI,CAACC,IAAL,CAAUH,GAAG,GAAC,IAAd,CAApB;AACA,aAAOQ,gBAAgB,GAAG,cAAnB,GACA,MADA,GACSC,aADT,GACyB,YADhC;AAED;AACF;AACF;;AACDC,OAAO,CAACC,GAAR,CAAYb,YAAY,CAACD,OAAD,CAAxB;AAEAe,MAAM,CAACC,OAAP,GAAiB;AAACf,EAAAA;AAAD,CAAjB","sourcesContent":["class AssignLabware {\n  constructor(vol_per_multiplier, multiplier, single_or_multi){\n    this.vol_per_multiplier = vol_per_multiplier;\n    this.multiplier = multiplier;\n    this.single_or_multi = single_or_multi;\n  }\n}\n// console.log(liquid_vol)\nvar liquid1 = new AssignLabware(2500, 9, 'Single');\n\n\nfunction find_labware(liquid){\n  let vol = liquid.vol_per_multiplier*liquid.multiplier;\n  let single_or_multi = liquid.single_or_multi;\n\n  if (liquid.single_or_multi == 'Multi' || 'multi') {   // MULTI-CHANNEL ACCESS\n    if (vol > 4000 && vol < 90000 && liquid.single_or_multi == 'Multi' || 'multi'){\n      let num_wells = Math.ceil(vol/14000);\n      return('Total Volume: ' + vol/1000 + 'mL  /// ' +\n      ' Recommended labware: ' + ' Nest 12 Well Reservoir /// ' + num_wells + ' wells');\n    }\n    else if (vol > 50000){\n      let labware_count = Math.ceil(vol/185000);\n      return('Total Volume: ' + vol/1000 + 'mL  /// ' +\n      ' Recommended labware: ' + labware_count + ' Nest 1 Well Reservoir(s)');\n    }\n    else if (vol < 4000) {\n      return('Total Volume: ' + vol/1000 + 'mL  /// ' +\n            ' Recommended labware: ' + 'Well plate');\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single' || 'single'){               // SINGLE-CHANNEL ACCESS\n    if (vol > 8000 && vol < 90000){\n      let num_well_res = Math.ceil(vol/14000);\n      let num_tubes_falcon = Math.ceil(vol/46000);\n      let num_tubes_15mL = Math.ceil(vol/12000);\n      return('Nest 12 Well Reservoir with ' + num_well_res + ' well(s), ' +\n             'Falcon 50mL tubes with ' + num_tubes_falcon + ' tube(s), ' +\n             'or 15mL tubes with ' + num_tubes_15mL + ' tube(s)'\n    );\n    }\n    else if (vol < 8000){\n      let num_tubes_1500ul = Math.ceil(vol/1400);\n      let num_tubes_2mL = Math.ceil(vol/1800);\n      return(num_tubes_1500ul + ' 1.5mL tubes' +\n             ' or ' + num_tubes_2mL + ' 2mL tubes');\n    }\n  }\n}\nconsole.log(find_labware(liquid1));\n\nmodule.exports = {find_labware}\n"]},"metadata":{},"sourceType":"module"}