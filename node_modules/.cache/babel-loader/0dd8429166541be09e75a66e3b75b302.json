{"ast":null,"code":"class AssignLabware {\n  constructor(vol_per_multiplier, multiplier, single_or_multi) {\n    this.vol_per_multiplier = vol_per_multiplier;\n    this.multiplier = multiplier;\n    this.single_or_multi = single_or_multi;\n  }\n\n} // console.log(liquid_vol)\n\n\nvar liquid1 = new AssignLabware(100, 40, 'Multi');\n\nfunction find_labware(liquid) {\n  let vol = liquid.vol_per_multiplier * liquid.multiplier;\n  let single_or_multi = liquid.single_or_multi;\n  let vol_string = ' (total vol ' + vol / 1000 + 'mL)';\n\n  if (liquid.single_or_multi == 'Multi') {\n    // MULTI-CHANNEL ACCESS\n    if (vol > 4000 && vol < 90000) {\n      let num_wells = Math.ceil(vol / 14000);\n      return ' Nest 12 Well Reservoir, ' + num_wells + ' wells' + vol_string;\n    } else if (vol >= 50000) {\n      let labware_count = Math.ceil(vol / 185000);\n      return labware_count + ' Nest 1 Well Reservoirs' + vol_string;\n    } else if (vol <= 4000) {\n      return 'Well plate' + vol_string;\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single') {\n    // SINGLE-CHANNEL ACCESS\n    if (vol > 8000 && vol < 90000) {\n      let num_well_res = Math.ceil(vol / 14000);\n      let num_tubes_falcon = Math.ceil(vol / 46000);\n      let num_tubes_15mL = Math.ceil(vol / 12000);\n      return 'Nest 12 Well Reservoir with ' + num_well_res + ' wells, ' + 'Falcon 50mL tubes with ' + num_tubes_falcon + ' tubes, ' + 'or 15mL tubes with ' + num_tubes_15mL + ' tubes' + vol_string;\n    } else if (vol < 8000) {\n      let num_tubes_1500ul = Math.ceil(vol / 1400);\n      let num_tubes_2mL = Math.ceil(vol / 1800);\n      return '(' + num_tubes_1500ul + ')' + ' 1.5mL tubes' + ' || OR ||' + '(' + num_tubes_2mL + ')' + ' 2mL tubes' + vol_string;\n    }\n  }\n}\n\nconsole.log(find_labware(liquid1));\nmodule.exports = {\n  find_labware\n};","map":{"version":3,"sources":["/Users/work/Desktop/consumable-calculator/src/calculator.js"],"names":["AssignLabware","constructor","vol_per_multiplier","multiplier","single_or_multi","liquid1","find_labware","liquid","vol","vol_string","num_wells","Math","ceil","labware_count","num_well_res","num_tubes_falcon","num_tubes_15mL","num_tubes_1500ul","num_tubes_2mL","console","log","module","exports"],"mappings":"AAAA,MAAMA,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,kBAAD,EAAqBC,UAArB,EAAiCC,eAAjC,EAAiD;AAC1D,SAAKF,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACD;;AALiB,C,CAOpB;;;AACA,IAAIC,OAAO,GAAG,IAAIL,aAAJ,CAAkB,GAAlB,EAAuB,EAAvB,EAA2B,OAA3B,CAAd;;AAGA,SAASM,YAAT,CAAsBC,MAAtB,EAA6B;AAC3B,MAAIC,GAAG,GAAGD,MAAM,CAACL,kBAAP,GAA0BK,MAAM,CAACJ,UAA3C;AACA,MAAIC,eAAe,GAAGG,MAAM,CAACH,eAA7B;AACA,MAAIK,UAAU,GAAG,iBAAiBD,GAAG,GAAC,IAArB,GAA4B,KAA7C;;AAEA,MAAID,MAAM,CAACH,eAAP,IAA0B,OAA9B,EAAuC;AAAI;AACzC,QAAII,GAAG,GAAG,IAAN,IAAcA,GAAG,GAAG,KAAxB,EAA8B;AAC5B,UAAIE,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUJ,GAAG,GAAC,KAAd,CAAhB;AACA,aAAO,8BAA8BE,SAA9B,GAA0C,QAA1C,GAAqDD,UAA5D;AACD,KAHD,MAIK,IAAID,GAAG,IAAI,KAAX,EAAiB;AACpB,UAAIK,aAAa,GAAGF,IAAI,CAACC,IAAL,CAAUJ,GAAG,GAAC,MAAd,CAApB;AACA,aAAOK,aAAa,GAAG,yBAAhB,GAA4CJ,UAAnD;AACD,KAHI,MAIA,IAAID,GAAG,IAAI,IAAX,EAAiB;AACpB,aAAQ,eAAeC,UAAvB;AACD;AACF;;AAED,MAAIF,MAAM,CAACH,eAAP,IAA0B,QAA9B,EAAuC;AAAgB;AACrD,QAAII,GAAG,GAAG,IAAN,IAAcA,GAAG,GAAG,KAAxB,EAA8B;AAC5B,UAAIM,YAAY,GAAGH,IAAI,CAACC,IAAL,CAAUJ,GAAG,GAAC,KAAd,CAAnB;AACA,UAAIO,gBAAgB,GAAGJ,IAAI,CAACC,IAAL,CAAUJ,GAAG,GAAC,KAAd,CAAvB;AACA,UAAIQ,cAAc,GAAGL,IAAI,CAACC,IAAL,CAAUJ,GAAG,GAAC,KAAd,CAArB;AACA,aAAO,iCAAiCM,YAAjC,GAAgD,UAAhD,GACA,yBADA,GAC4BC,gBAD5B,GAC+C,UAD/C,GAEA,qBAFA,GAEwBC,cAFxB,GAEyC,QAFzC,GAEoDP,UAF3D;AAID,KARD,MASK,IAAID,GAAG,GAAG,IAAV,EAAe;AAClB,UAAIS,gBAAgB,GAAGN,IAAI,CAACC,IAAL,CAAUJ,GAAG,GAAC,IAAd,CAAvB;AACA,UAAIU,aAAa,GAAGP,IAAI,CAACC,IAAL,CAAUJ,GAAG,GAAC,IAAd,CAApB;AACA,aAAO,MAAMS,gBAAN,GAAyB,GAAzB,GAA+B,cAA/B,GACA,WADA,GACc,GADd,GACoBC,aADpB,GACoC,GADpC,GAC0C,YAD1C,GACyDT,UADhE;AAED;AACF;AACF;;AACDU,OAAO,CAACC,GAAR,CAAYd,YAAY,CAACD,OAAD,CAAxB;AAEAgB,MAAM,CAACC,OAAP,GAAiB;AAAChB,EAAAA;AAAD,CAAjB","sourcesContent":["class AssignLabware {\n  constructor(vol_per_multiplier, multiplier, single_or_multi){\n    this.vol_per_multiplier = vol_per_multiplier;\n    this.multiplier = multiplier;\n    this.single_or_multi = single_or_multi;\n  }\n}\n// console.log(liquid_vol)\nvar liquid1 = new AssignLabware(100, 40, 'Multi');\n\n\nfunction find_labware(liquid){\n  let vol = liquid.vol_per_multiplier*liquid.multiplier;\n  let single_or_multi = liquid.single_or_multi;\n  let vol_string = ' (total vol ' + vol/1000 + 'mL)'\n\n  if (liquid.single_or_multi == 'Multi') {   // MULTI-CHANNEL ACCESS\n    if (vol > 4000 && vol < 90000){\n      let num_wells = Math.ceil(vol/14000);\n      return(' Nest 12 Well Reservoir, ' + num_wells + ' wells' + vol_string);\n    }\n    else if (vol >= 50000){\n      let labware_count = Math.ceil(vol/185000);\n      return(labware_count + ' Nest 1 Well Reservoirs' + vol_string);\n    }\n    else if (vol <= 4000) {\n      return( 'Well plate' + vol_string);\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single'){               // SINGLE-CHANNEL ACCESS\n    if (vol > 8000 && vol < 90000){\n      let num_well_res = Math.ceil(vol/14000);\n      let num_tubes_falcon = Math.ceil(vol/46000);\n      let num_tubes_15mL = Math.ceil(vol/12000);\n      return('Nest 12 Well Reservoir with ' + num_well_res + ' wells, ' +\n             'Falcon 50mL tubes with ' + num_tubes_falcon + ' tubes, ' +\n             'or 15mL tubes with ' + num_tubes_15mL + ' tubes' + vol_string\n    );\n    }\n    else if (vol < 8000){\n      let num_tubes_1500ul = Math.ceil(vol/1400);\n      let num_tubes_2mL = Math.ceil(vol/1800);\n      return('(' + num_tubes_1500ul + ')' + ' 1.5mL tubes' +\n             ' || OR ||' + '(' + num_tubes_2mL + ')' + ' 2mL tubes' + vol_string);\n    }\n  }\n}\nconsole.log(find_labware(liquid1));\n\nmodule.exports = {find_labware}\n"]},"metadata":{},"sourceType":"module"}