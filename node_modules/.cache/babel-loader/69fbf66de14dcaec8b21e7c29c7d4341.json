{"ast":null,"code":"class AssignPipette {\n  constructor(transfer_vol, eight_tips, change_tips, filter_tips) {\n    this.transfer_vol = transfer_vol;\n    this.eight_tips = eight_tips;\n    this.change_tips = change_tips;\n    this.filter_tips = filter_tips;\n  }\n\n}\n\nvar liquid1 = new AssignPipette(80, 'Yes', 'No', 'No');\n\nfunction FindPipette(liquid) {\n  var p1000 = 0;\n  var p300 = 0;\n  var m300 = 0;\n  var p20 = 0;\n  var m20 = 0;\n\n  if (liquid.transfer_vol <= 20) {\n    // P20 SINGLE CHANNEL PIPETTE\n    if (liquid.eight_tips == 'Yes') {\n      m20 += 1;\n      return 'P20 Multi-Channel Pipette';\n    } else if (liquid.eight_tips == 'No') {\n      p20 += 1;\n      return 'P20 Single-Channel Pipette';\n    }\n  } else if (liquid.transfer_vol > 20) {\n    // P300 SINGLE CHANNEL PIPETTE\n    if (liquid.transfer_vol < 100) {\n      if (liquid.eight_tips == 'Yes') {\n        var m300;\n        m300 += 1;\n        console.log(m300);\n        return 'P300 Multi-Channel Pipette';\n      } else if (liquid.eight_tips == 'No') {\n        p300 += 1;\n        return 'P300 Single-Channel Pipette';\n      }\n    } else if (liquid.transfer_vol > 100) {\n      if (liquid.filter_tips == \"Yes\") {\n        var tip_cap_300 = 200;\n      } else {\n        var tip_cap_300 = 300;\n      } // Multi-dispense P1000 vs P300 Multi, also accounts for if P300 multi\n      // has multiple transfers with P1000\n\n\n      if (liquid.change_tips == \"No\" && liquid.eight_tips == \"Yes\") {\n        let num_transfers_1000 = Math.ceil(8 / Math.floor(1000 / liquid.transfer_vol));\n        let num_transfers_300 = Math.ceil(liquid.transfer_vol / tip_cap_300);\n\n        if (num_transfers_1000 > num_transfers_300) {\n          m300 += 1;\n          return 'P300 Multi-Channel Pipette';\n        } else if (num_transfers_1000 < num_transfers_300) {\n          return 'P1000 Single-Channel Pipette';\n          p300 += 1;\n        } else if (num_transfers_1000 == num_transfers_300) {\n          m300 += 1;\n          p1000 += 1;\n          return 'P300 Multi-Channel Pipette -OR- P1000 Single-Channel Pipette';\n        }\n      } // P300 Single and P1000 for single-dispense\n\n\n      if (liquid.change_tips == \"Yes\" && liquid.eight_tips == \"No\") {\n        if (liquid.transfer_vol <= tip_cap_300) {\n          p300 += 1;\n          p1000 += 1;\n          return 'P300 Single-Channel or P1000 Single-Channel Pipette';\n        } else {\n          p1000 += 1;\n          return 'P1000 Single-Channel Pipette';\n        }\n      } // P300 Multi vs P1000 with Multi-Dispense\n\n\n      if (liquid.change_tips == \"Yes\" && liquid.eight_tips == \"Yes\") {\n        m300 += 1;\n        return 'P300 Multi-Channel Pipette';\n      } // P300 Single and P1000 for multi-dispense\n\n\n      if (liquid.change_tips == \"No\" && liquid.eight_tips == \"No\") {\n        p1000 += 1;\n        return 'P1000 Single-Channel Pipette';\n      }\n\n      if (liquid.change_tips == \"No\" && liquid.eight_tips == \"Yes\") {\n        let num_transfers_1000 = Math.floor(1000 / liquid.transfer_vol);\n        let num_transfers_300 = Math.floor(tip_cap_300 / liquid.transfer_vol);\n      }\n    }\n  } else {\n    p1000 += 1;\n    return 'P1000 Single-Channel Pipette';\n  }\n}\n\n_c = FindPipette;\nconsole.log(m300, m20, p20, p300, p1000);\nconsole.log(FindPipette(liquid1)); // module.exports = {find}\n\nexport default FindPipette;\n\nvar _c;\n\n$RefreshReg$(_c, \"FindPipette\");","map":{"version":3,"sources":["/Users/work/Desktop/pipette-calculator/src/calculator.js"],"names":["AssignPipette","constructor","transfer_vol","eight_tips","change_tips","filter_tips","liquid1","FindPipette","liquid","p1000","p300","m300","p20","m20","console","log","tip_cap_300","num_transfers_1000","Math","ceil","floor","num_transfers_300"],"mappings":"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","sourcesContent":["class AssignPipette {\n  constructor(transfer_vol, eight_tips, change_tips, filter_tips){\n    this.transfer_vol = transfer_vol;\n    this.eight_tips = eight_tips;\n    this.change_tips = change_tips;\n    this.filter_tips = filter_tips;\n  }\n}\nvar liquid1 = new AssignPipette(80, 'Yes', 'No', 'No');\n\n\nfunction FindPipette(liquid){\n  var p1000 = 0\n  var p300 = 0\n  var m300 = 0\n  var p20 = 0\n  var m20 = 0\n\n\n  if (liquid.transfer_vol <= 20) {             // P20 SINGLE CHANNEL PIPETTE\n    if (liquid.eight_tips == 'Yes'){\n      m20 += 1\n      return('P20 Multi-Channel Pipette')\n    }\n    else if (liquid.eight_tips == 'No') {\n      p20 += 1\n      return('P20 Single-Channel Pipette')\n    }\n  }\n\n  else if (liquid.transfer_vol > 20) {    // P300 SINGLE CHANNEL PIPETTE\n\n    if (liquid.transfer_vol < 100) {\n      if (liquid.eight_tips == 'Yes') {\n        var m300\n        m300 += 1\n        console.log(m300)\n        return('P300 Multi-Channel Pipette')\n      }\n\n      else if (liquid.eight_tips == 'No'){\n        p300 += 1\n        return('P300 Single-Channel Pipette')\n      }\n    }\n\n    else if (liquid.transfer_vol > 100) {\n      if (liquid.filter_tips == \"Yes\") {\n        var tip_cap_300 = 200\n      }\n      else {\n        var tip_cap_300 = 300\n      }\n\n      // Multi-dispense P1000 vs P300 Multi, also accounts for if P300 multi\n      // has multiple transfers with P1000\n      if (liquid.change_tips == \"No\"\n          && liquid.eight_tips == \"Yes\") {\n            let num_transfers_1000 = Math.ceil(8/Math.floor(1000/liquid.transfer_vol))\n            let num_transfers_300 = Math.ceil(liquid.transfer_vol/tip_cap_300)\n            if (num_transfers_1000 > num_transfers_300){\n              m300 += 1\n              return('P300 Multi-Channel Pipette')\n            }\n            else if (num_transfers_1000 < num_transfers_300){\n              return('P1000 Single-Channel Pipette')\n              p300 += 1\n            }\n            else if (num_transfers_1000 == num_transfers_300){\n              m300 += 1\n              p1000 += 1\n              return('P300 Multi-Channel Pipette -OR- P1000 Single-Channel Pipette')\n            }\n      }\n\n      // P300 Single and P1000 for single-dispense\n      if (liquid.change_tips == \"Yes\"\n          && liquid.eight_tips == \"No\") {\n            if (liquid.transfer_vol <= tip_cap_300) {\n              p300 += 1\n              p1000 += 1\n          return('P300 Single-Channel or P1000 Single-Channel Pipette')\n        }\n        else {\n          p1000 += 1\n          return('P1000 Single-Channel Pipette')\n        }\n      }\n\n\n      // P300 Multi vs P1000 with Multi-Dispense\n      if (liquid.change_tips == \"Yes\"\n          && liquid.eight_tips == \"Yes\") {\n            m300 += 1\n              return('P300 Multi-Channel Pipette')\n            }\n      // P300 Single and P1000 for multi-dispense\n      if (liquid.change_tips == \"No\"\n          && liquid.eight_tips == \"No\") {\n            p1000 += 1\n              return('P1000 Single-Channel Pipette')\n      }\n\n\n\n      if (liquid.change_tips == \"No\" && liquid.eight_tips == \"Yes\") {\n        let num_transfers_1000 = Math.floor(1000/liquid.transfer_vol)\n        let num_transfers_300 = Math.floor(tip_cap_300/liquid.transfer_vol)\n      }\n    }\n  }\n\n  else {\n    p1000 += 1\n    return('P1000 Single-Channel Pipette')\n  }\n\n}\n\nconsole.log(m300, m20, p20, p300, p1000)\nconsole.log(FindPipette(liquid1));\n\n// module.exports = {find}\nexport default FindPipette;\n"]},"metadata":{},"sourceType":"module"}