{"ast":null,"code":"import _classCallCheck from\"/Users/work/Desktop/consumable-calculator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";var AssignLabware=function AssignLabware(vol_per_multiplier,multiplier,single_or_multi){_classCallCheck(this,AssignLabware);this.vol_per_multiplier=vol_per_multiplier;this.multiplier=multiplier;this.single_or_multi=single_or_multi;// this.vol = Number(vol_per_multiplier)*Number(multiplier)\n};// console.log(liquid_vol)\n// var liquid1 = new AssignLabware(100, 40, 'Multi');\nfunction find_labware(liquid){var vol=liquid.vol_per_multiplier*liquid.multiplier/1000;// return(vol)\nvar single_or_multi=liquid.single_or_multi;var vol_notation=vol>0.5?vol:vol*1000;var vol_string=vol_notation+(vol>0.5?'mL':'ul');var left_paren='(';var right_paren=')';var well_ceiling_res=14;var well_ceiling_195mL=185;var well_ceiling_falcon=45;var well_ceiling_15mL=13;var well_ceiling_1500ul=1.2;var well_ceiling_2000ul=1.7;if(liquid.single_or_multi=='Multi'){// MULTI-CHANNEL ACCESS\nif(vol>4&&vol<185){var num_wells=Math.ceil(vol/well_ceiling_res);if(vol>50){return[' Nest 12 Well Reservoir '+left_paren+num_wells+' wells'+right_paren+', or Nest 1 Well Reservior ',vol_string];}else{return[' Nest 12 Well Reservoir '+left_paren+num_wells+' wells'+right_paren,vol_string];}}else if(vol>=50){var labware_count=Math.ceil(vol/well_ceiling_195mL);return[labware_count+' Nest 1 Well Reservoirs',vol_string];}else if(vol<=4){return['Well plate',vol_string];}}if(liquid.single_or_multi=='Single'){// SINGLE-CHANNEL ACCESS\nvar num_well_res_12=Math.ceil(vol/well_ceiling_res);var num_tubes_falcon=Math.ceil(vol/well_ceiling_falcon);var num_tubes_15mL=Math.ceil(vol/well_ceiling_15mL);var nest_12_string=' Nest 12 Well Reservoir'+left_paren+num_well_res_12+' wells'+right_paren;var nest_1_string=', Nest 1 Well Reservior';var falcon_50_string=', Falcon 50mL tubes '+left_paren+num_tubes_falcon+' tubes '+right_paren;var tube_15mL_string=', or 15mL tubes '+left_paren+num_tubes_15mL+' tubes'+right_paren;if(vol>10&&vol<185){if(vol>50){return[nest_12_string+nest_1_string+falcon_50_string+tube_15mL_string,vol_string];}else{return[nest_12_string+falcon_50_string+tube_15mL_string,vol_string];}}else if(vol<=10){var num_tubes_1500ul=Math.ceil(vol/well_ceiling_1500ul);var num_tubes_2000ul=Math.ceil(vol/well_ceiling_2000ul);var tube_1500ul_string=left_paren+num_tubes_1500ul+right_paren+' 1.5mL tubes';var tube_2000ul_string=', or '+left_paren+num_tubes_2000ul+right_paren+' 2mL tubes';return[tube_1500ul_string+tube_2000ul_string,vol_string];}else{var _labware_count=Math.ceil(vol/well_ceiling_195mL);return[left_paren+_labware_count+right_paren+' Nest 1 Well Reservior(s)',vol_string];}}}// console.log(find_labware(liquid1.vol));\n// module.exports = {find_labware}\nexport default Find_labware;","map":{"version":3,"sources":["/Users/work/Desktop/consumable-calculator/src/calculator.js"],"names":["AssignLabware","vol_per_multiplier","multiplier","single_or_multi","find_labware","liquid","vol","vol_notation","vol_string","left_paren","right_paren","well_ceiling_res","well_ceiling_195mL","well_ceiling_falcon","well_ceiling_15mL","well_ceiling_1500ul","well_ceiling_2000ul","num_wells","Math","ceil","labware_count","num_well_res_12","num_tubes_falcon","num_tubes_15mL","nest_12_string","nest_1_string","falcon_50_string","tube_15mL_string","num_tubes_1500ul","num_tubes_2000ul","tube_1500ul_string","tube_2000ul_string","Find_labware"],"mappings":"qKAAMA,CAAAA,a,CACJ,uBAAYC,kBAAZ,CAAgCC,UAAhC,CAA4CC,eAA5C,CAA4D,qCAC1D,KAAKF,kBAAL,CAA0BA,kBAA1B,CACA,KAAKC,UAAL,CAAkBA,UAAlB,CACA,KAAKC,eAAL,CAAuBA,eAAvB,CACA;AACD,C,CAEH;AACA;AAEA,QAASC,CAAAA,YAAT,CAAsBC,MAAtB,CAA6B,CAC3B,GAAIC,CAAAA,GAAG,CAAGD,MAAM,CAACJ,kBAAP,CAA0BI,MAAM,CAACH,UAAjC,CAA4C,IAAtD,CACA;AACA,GAAIC,CAAAA,eAAe,CAAGE,MAAM,CAACF,eAA7B,CACA,GAAII,CAAAA,YAAY,CAAID,GAAG,CAAG,GAAP,CAAcA,GAAd,CAAoBA,GAAG,CAAC,IAA3C,CACA,GAAIE,CAAAA,UAAU,CAAGD,YAAY,EAAKD,GAAG,CAAG,GAAP,CAAc,IAAd,CAAqB,IAAzB,CAA7B,CACA,GAAIG,CAAAA,UAAU,CAAG,GAAjB,CACA,GAAIC,CAAAA,WAAW,CAAG,GAAlB,CAEA,GAAIC,CAAAA,gBAAgB,CAAG,EAAvB,CACA,GAAIC,CAAAA,kBAAkB,CAAG,GAAzB,CACA,GAAIC,CAAAA,mBAAmB,CAAG,EAA1B,CACA,GAAIC,CAAAA,iBAAiB,CAAG,EAAxB,CACA,GAAIC,CAAAA,mBAAmB,CAAG,GAA1B,CACA,GAAIC,CAAAA,mBAAmB,CAAG,GAA1B,CAEA,GAAIX,MAAM,CAACF,eAAP,EAA0B,OAA9B,CAAuC,CAAI;AACzC,GAAIG,GAAG,CAAG,CAAN,EAAWA,GAAG,CAAG,GAArB,CAAyB,CACvB,GAAIW,CAAAA,SAAS,CAAGC,IAAI,CAACC,IAAL,CAAUb,GAAG,CAACK,gBAAd,CAAhB,CACA,GAAIL,GAAG,CAAG,EAAV,CAAa,CACX,MAAO,CAAC,2BAA8BG,UAA9B,CAA2CQ,SAA3C,CAAuD,QAAvD,CAAkEP,WAAlE,CACD,6BADA,CAC+BF,UAD/B,CAAP,CAED,CAHD,IAIK,CACH,MAAO,CAAC,2BAA6BC,UAA7B,CAA0CQ,SAA1C,CAAsD,QAAtD,CAAiEP,WAAlE,CAAgFF,UAAhF,CAAP,CACD,CAEF,CAVD,IAWK,IAAIF,GAAG,EAAI,EAAX,CAAc,CACjB,GAAIc,CAAAA,aAAa,CAAGF,IAAI,CAACC,IAAL,CAAUb,GAAG,CAACM,kBAAd,CAApB,CACA,MAAO,CAACQ,aAAa,CAAG,yBAAjB,CAA4CZ,UAA5C,CAAP,CACD,CAHI,IAIA,IAAIF,GAAG,EAAI,CAAX,CAAc,CACjB,MAAO,CAAC,YAAD,CAAgBE,UAAhB,CAAP,CACD,CACF,CAED,GAAIH,MAAM,CAACF,eAAP,EAA0B,QAA9B,CAAuC,CAAgB;AACrD,GAAIkB,CAAAA,eAAe,CAAGH,IAAI,CAACC,IAAL,CAAUb,GAAG,CAACK,gBAAd,CAAtB,CACA,GAAIW,CAAAA,gBAAgB,CAAGJ,IAAI,CAACC,IAAL,CAAUb,GAAG,CAACO,mBAAd,CAAvB,CACA,GAAIU,CAAAA,cAAc,CAAGL,IAAI,CAACC,IAAL,CAAUb,GAAG,CAACQ,iBAAd,CAArB,CAEA,GAAIU,CAAAA,cAAc,CAAG,0BAA4Bf,UAA5B,CAAyCY,eAAzC,CAA2D,QAA3D,CAAsEX,WAA3F,CACA,GAAIe,CAAAA,aAAa,CAAG,yBAApB,CACA,GAAIC,CAAAA,gBAAgB,CAAG,uBAAyBjB,UAAzB,CAAsCa,gBAAtC,CAAyD,SAAzD,CAAqEZ,WAA5F,CACA,GAAIiB,CAAAA,gBAAgB,CAAG,mBAAqBlB,UAArB,CAAkCc,cAAlC,CAAmD,QAAnD,CAA8Db,WAArF,CAEA,GAAIJ,GAAG,CAAG,EAAN,EAAYA,GAAG,CAAG,GAAtB,CAA0B,CACxB,GAAIA,GAAG,CAAG,EAAV,CAAa,CACX,MAAO,CAACkB,cAAc,CAAGC,aAAjB,CAAiCC,gBAAjC,CAAoDC,gBAArD,CAAwEnB,UAAxE,CAAP,CACD,CAFD,IAGK,CACH,MAAO,CAACgB,cAAc,CAAGE,gBAAjB,CAAoCC,gBAArC,CAAuDnB,UAAvD,CAAP,CACD,CAEF,CARD,IASK,IAAIF,GAAG,EAAI,EAAX,CAAc,CAEjB,GAAIsB,CAAAA,gBAAgB,CAAGV,IAAI,CAACC,IAAL,CAAUb,GAAG,CAACS,mBAAd,CAAvB,CACA,GAAIc,CAAAA,gBAAgB,CAAGX,IAAI,CAACC,IAAL,CAAUb,GAAG,CAACU,mBAAd,CAAvB,CAEA,GAAIc,CAAAA,kBAAkB,CAAGrB,UAAU,CAAGmB,gBAAb,CAAgClB,WAAhC,CAA8C,cAAvE,CACA,GAAIqB,CAAAA,kBAAkB,CAAG,QAAUtB,UAAV,CAAuBoB,gBAAvB,CAA0CnB,WAA1C,CAAwD,YAAjF,CAEA,MAAO,CAACoB,kBAAkB,CAAGC,kBAAtB,CAA2CvB,UAA3C,CAAP,CACD,CATI,IAUD,CACF,GAAIY,CAAAA,cAAa,CAAGF,IAAI,CAACC,IAAL,CAAUb,GAAG,CAACM,kBAAd,CAApB,CACA,MAAO,CAACH,UAAU,CAAGW,cAAb,CAA6BV,WAA7B,CAA2C,2BAA5C,CAAyEF,UAAzE,CAAP,CACD,CACF,CACF,CACD;AAEA;AACA,cAAewB,CAAAA,YAAf","sourcesContent":["class AssignLabware {\n  constructor(vol_per_multiplier, multiplier, single_or_multi){\n    this.vol_per_multiplier = vol_per_multiplier;\n    this.multiplier = multiplier;\n    this.single_or_multi = single_or_multi;\n    // this.vol = Number(vol_per_multiplier)*Number(multiplier)\n  }\n}\n// console.log(liquid_vol)\n// var liquid1 = new AssignLabware(100, 40, 'Multi');\n\nfunction find_labware(liquid){\n  let vol = liquid.vol_per_multiplier*liquid.multiplier/1000;\n  // return(vol)\n  let single_or_multi = liquid.single_or_multi;\n  let vol_notation = (vol > 0.5) ? vol : vol*1000\n  let vol_string = vol_notation + ((vol > 0.5) ? 'mL' : 'ul')\n  let left_paren = '('\n  let right_paren = ')'\n\n  let well_ceiling_res = 14\n  let well_ceiling_195mL = 185\n  let well_ceiling_falcon = 45\n  let well_ceiling_15mL = 13\n  let well_ceiling_1500ul = 1.2\n  let well_ceiling_2000ul = 1.7\n\n  if (liquid.single_or_multi == 'Multi') {   // MULTI-CHANNEL ACCESS\n    if (vol > 4 && vol < 185){\n      let num_wells = Math.ceil(vol/well_ceiling_res);\n      if (vol > 50){\n        return([' Nest 12 Well Reservoir ' +  left_paren + num_wells + ' wells' + right_paren +\n               ', or Nest 1 Well Reservior ', vol_string])\n      }\n      else {\n        return([' Nest 12 Well Reservoir ' + left_paren + num_wells + ' wells' + right_paren , vol_string]);\n      }\n\n    }\n    else if (vol >= 50){\n      let labware_count = Math.ceil(vol/well_ceiling_195mL);\n      return([labware_count + ' Nest 1 Well Reservoirs', vol_string] );\n    }\n    else if (vol <= 4) {\n      return(['Well plate' , vol_string]);\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single'){               // SINGLE-CHANNEL ACCESS\n    let num_well_res_12 = Math.ceil(vol/well_ceiling_res);\n    let num_tubes_falcon = Math.ceil(vol/well_ceiling_falcon);\n    let num_tubes_15mL = Math.ceil(vol/well_ceiling_15mL);\n\n    let nest_12_string = ' Nest 12 Well Reservoir' + left_paren + num_well_res_12 + ' wells' + right_paren\n    let nest_1_string = ', Nest 1 Well Reservior'\n    let falcon_50_string = ', Falcon 50mL tubes ' + left_paren + num_tubes_falcon + ' tubes ' + right_paren\n    let tube_15mL_string = ', or 15mL tubes ' + left_paren + num_tubes_15mL + ' tubes' + right_paren\n\n    if (vol > 10 && vol < 185){\n      if (vol > 50){\n        return([nest_12_string + nest_1_string + falcon_50_string + tube_15mL_string , vol_string])\n      }\n      else {\n        return([nest_12_string + falcon_50_string + tube_15mL_string, vol_string])\n      }\n\n    }\n    else if (vol <= 10){\n\n      let num_tubes_1500ul = Math.ceil(vol/well_ceiling_1500ul);\n      let num_tubes_2000ul = Math.ceil(vol/well_ceiling_2000ul);\n\n      let tube_1500ul_string = left_paren + num_tubes_1500ul + right_paren + ' 1.5mL tubes'\n      let tube_2000ul_string = ', or ' + left_paren + num_tubes_2000ul + right_paren + ' 2mL tubes'\n\n      return([tube_1500ul_string + tube_2000ul_string , vol_string]);\n    }\n    else{\n      let labware_count = Math.ceil(vol/well_ceiling_195mL);\n      return([left_paren + labware_count + right_paren + ' Nest 1 Well Reservior(s)', vol_string])\n    }\n  }\n}\n// console.log(find_labware(liquid1.vol));\n\n// module.exports = {find_labware}\nexport default Find_labware;\n"]},"metadata":{},"sourceType":"module"}